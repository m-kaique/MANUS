A verifica√ß√£o de nova barra est√° bloqueando opera√ß√µes que deveriam ocorrer a cada tick.
PROBLEMA: Trailing stops, verifica√ß√£o de TP/SL, gest√£o de posi√ß√µes N√ÉO PODEM esperar nova barra!

üìä FLUXOGRAMA DO FLUXO CORRETO
flowchart TB
    Start([OnTick]) --> ValidateComponents{Componentes OK?}
    ValidateComponents -->|N√£o| End1([Return])
    ValidateComponents -->|Sim| CheckTime{Passou 5 seg?}
    
    CheckTime -->|N√£o| ManageOnly[Gerenciar Posi√ß√µes Apenas]
    CheckTime -->|Sim| CheckNewBar{Nova Barra?}
    
    ManageOnly --> CheckOpenPos1{Posi√ß√µes Abertas?}
    CheckOpenPos1 -->|Sim| UpdateStops1[Atualizar Stops/TP]
    CheckOpenPos1 -->|N√£o| End2([Return])
    UpdateStops1 --> CheckPartials1[Verificar Parciais]
    CheckPartials1 --> End3([Return])
    
    CheckNewBar -->|N√£o| ManagePositions[Gerenciar Posi√ß√µes]
    CheckNewBar -->|Sim| ProcessAssets[Processar Ativos]
    
    ProcessAssets --> ForEachAsset{Para cada ativo}
    ForEachAsset --> UpdateContext[Atualizar Contexto]
    UpdateContext --> DetectPhase[Detectar Fase]
    DetectPhase --> GenerateSignal[Gerar Sinal]
    GenerateSignal --> ClassifySetup[Classificar Setup]
    ClassifySetup --> CreateOrder[Criar Ordem]
    CreateOrder --> ExecuteOrder[Executar Ordem]
    ExecuteOrder --> NextAsset{Pr√≥ximo Ativo?}
    NextAsset -->|Sim| ForEachAsset
    NextAsset -->|N√£o| ManagePositions
    
    ManagePositions --> CheckOpenPos2{Posi√ß√µes Abertas?}
    CheckOpenPos2 -->|Sim| UpdateStops2[Atualizar Trailing Stops]
    CheckOpenPos2 -->|N√£o| GenerateReport
    UpdateStops2 --> CheckPartials2[Verificar Parciais]
    CheckPartials2 --> CheckBreakeven[Verificar Breakeven]
    CheckBreakeven --> GenerateReport
    
    GenerateReport --> ReportTime{Hora do Report?}
    ReportTime -->|Sim| CreateReport[Gerar Relat√≥rio]
    ReportTime -->|N√£o| End4([Return])
    CreateReport --> End5([Return])
    
    style Start fill:#90EE90
    style ManageOnly fill:#FFB6C1
    style ProcessAssets fill:#87CEEB
    style GenerateReport fill:#DDA0DD

üîß CORRE√á√ÉO DO ONTICK

void OnTick() {
   // === SEMPRE EXECUTAR ===
   
   // 1. Valida√ß√µes b√°sicas
   if(!InitialValidations()) {
      return;
   }
   
   // 2. SEMPRE gerenciar posi√ß√µes existentes (cr√≠tico!)
   ManageExistingPositions();
   
   // === EXECUTAR COM THROTTLING ===
   
   datetime currentTime = TimeCurrent();
   
   // 3. Verificar se deve processar an√°lises completas
   if(currentTime - g_lastProcessTime >= g_processIntervalSeconds) {
      g_lastProcessTime = currentTime;
      
      // 4. Atualizar informa√ß√µes globais
      UpdateGlobalInformation();
      
      // 5. Verificar novas barras para SINAIS NOVOS apenas
      if(HasNewBarInAnyAsset()) {
         // Processar novos sinais
         bool hasNewSignals = ProcessAllAssets();
      }
      
      // 6. Relat√≥rios peri√≥dicos
      GeneratePerformanceReports(currentTime);
   }
}

// Nova fun√ß√£o auxiliar
bool HasNewBarInAnyAsset() {
   for(int i = 0; i < ArraySize(g_assets); i++) {
      if(!g_assets[i].enabled || !g_assets[i].historyAvailable) continue;
      
      datetime currentBarTime = iTime(g_assets[i].symbol, MainTimeframe, 0);
      if(currentBarTime != g_lastBarTimes[i]) {
         return true; // Pelo menos um ativo tem nova barra
      }
   }
   return false;
}

1Ô∏è‚É£ A CADA TICK (Sempre)
‚îú‚îÄ‚îÄ Validar componentes
‚îú‚îÄ‚îÄ Verificar SL/TP atingidos
‚îú‚îÄ‚îÄ Atualizar trailing stops
‚îú‚îÄ‚îÄ Verificar condi√ß√µes para parciais
‚îú‚îÄ‚îÄ Mover stop para breakeven (se configurado)
‚îî‚îÄ‚îÄ Atualizar P&L flutuante

2Ô∏è‚É£ A CADA 5 SEGUNDOS
‚îú‚îÄ‚îÄ Atualizar informa√ß√µes da conta
‚îú‚îÄ‚îÄ Verificar novas barras
‚îú‚îÄ‚îÄ Atualizar contexto de mercado
‚îî‚îÄ‚îÄ Verificar condi√ß√µes de sa√≠da antecipada

3Ô∏è‚É£ APENAS EM NOVA BARRA
‚îú‚îÄ‚îÄ Detectar mudan√ßa de fase de mercado
‚îú‚îÄ‚îÄ Gerar novos sinais
‚îú‚îÄ‚îÄ Classificar qualidade de setups
‚îú‚îÄ‚îÄ Calcular tamanho de posi√ß√£o
‚îî‚îÄ‚îÄ Executar novas ordens

4Ô∏è‚É£ A CADA HORA
‚îú‚îÄ‚îÄ Gerar relat√≥rio de performance
‚îú‚îÄ‚îÄ Exportar logs
‚îú‚îÄ‚îÄ Limpar caches antigos
‚îî‚îÄ‚îÄ Verificar integridade do sistema

üéØ RESULTADO ESPERADO DE CADA A√á√ÉO

ManageExistingPositions() (A cada tick)
ENTRADA: Posi√ß√µes abertas
PROCESSO:
  1. Para cada posi√ß√£o:
     - Verificar se SL/TP foi atingido
     - Calcular novo trailing stop
     - Verificar condi√ß√µes para parcial
     - Atualizar stop se necess√°rio
SA√çDA: Posi√ß√µes atualizadas/fechadas
FREQU√äNCIA: SEMPRE (cr√≠tico!)

ProcessAllAssets() (Nova barra)
ENTRADA: Lista de ativos habilitados
PROCESSO:
  1. Para cada ativo com nova barra:
     - Atualizar contexto de mercado
     - Detectar fase (Trend/Range/Reversal)
     - Gerar sinal se houver setup
     - Classificar qualidade
     - Criar ordem se aprovado
SA√çDA: Novos sinais/ordens
FREQU√äNCIA: Apenas em nova barra


UpdateGlobalInformation() (Peri√≥dico)
ENTRADA: Estado atual do sistema
PROCESSO:
  1. Atualizar saldo/equity
  2. Recalcular margem dispon√≠vel
  3. Verificar limites de risco
  4. Atualizar estat√≠sticas
SA√çDA: Informa√ß√µes atualizadas
FREQU√äNCIA: A cada 5 segundos



üîÑ FLUXO DETALHADO DO TRAILING STOP

flowchart LR
    A[Posi√ß√£o Aberta] --> B{Em Lucro?}
    B -->|N√£o| C[Manter SL Original]
    B -->|Sim| D{Tipo Trailing}
    
    D -->|Fixo| E[Calcular por Pontos]
    D -->|ATR| F[Calcular por ATR]
    D -->|MA| G[Calcular por M√©dia]
    
    E --> H{Novo SL Melhor?}
    F --> H
    G --> H
    
    H -->|Sim| I[Modificar Stop]
    H -->|N√£o| J[Manter Atual]
    
    I --> K[Log Modifica√ß√£o]
    J --> L[Aguardar Pr√≥ximo Tick]
    
    K --> L
    C --> L

‚ö° OTIMIZA√á√ïES RECOMENDADAS
1. Separar Processamento

void OnTick() {
   // Cr√≠tico - sempre
   ProcessCriticalTasks();
   
   // Peri√≥dico - com throttle
   if(ShouldProcessPeriodic()) {
      ProcessPeriodicTasks();
   }
   
   // Sinais - apenas nova barra
   if(HasNewBar()) {
      ProcessNewSignals();
   }
}

2. Cache de Estado

struct PositionState {
   ulong ticket;
   double lastSL;
   double lastTP;
   datetime lastModified;
   bool inProfit;
   double profitPoints;
};

3. Prioriza√ß√£o de Tarefas

enum TASK_PRIORITY {
   PRIORITY_CRITICAL,    // SL/TP, Trailing
   PRIORITY_HIGH,        // Parciais, Breakeven
   PRIORITY_NORMAL,      // Novos sinais
   PRIORITY_LOW          // Relat√≥rios, logs
};

üìä EXEMPLO DE LOG ESPERADO

[10:35:15.123] [DEBUG] OnTick: Processando tick #4532
[10:35:15.124] [DEBUG] ManagePositions: 3 posi√ß√µes abertas
[10:35:15.125] [DEBUG] TrailingStop: WIN$D #12345 - SL movido de 115500 para 115600
[10:35:15.126] [DEBUG] Throttled: Pr√≥ximo processamento em 4.8s

[10:35:20.001] [DEBUG] OnTick: Processando tick #4698
[10:35:20.002] [INFO] Nova barra detectada: WIN$D M3
[10:35:20.003] [DEBUG] ProcessAssets: Analisando WIN$D
[10:35:20.050] [INFO] Sinal gerado: WIN$D BUY @116000
[10:35:20.100] [INFO] Ordem executada: #12346 WIN$D BUY 2.0 lotes

[10:35:20.456] [DEBUG] OnTick: Processando tick #4699
[10:35:20.457] [DEBUG] Partial: WIN$D #12346 atingiu 1.0 R:R
[10:35:20.500] [INFO] Parcial executada: Fechado 0.6 lotes

Esta reestrutura√ß√£o garante que opera√ß√µes cr√≠ticas como gest√£o de stops sejam executadas a cada tick, enquanto an√°lises mais pesadas s√£o feitas apenas quando necess√°rio.



